{
  "score": 79,
  "totalScore": 79,
  "maxScore": 100,
  "categories": {
    "requestMethodValidation": {
      "passed": true,
      "score": 20,
      "details": [],
      "fixes": []
    },
    "httpsEnforcement": {
      "passed": false,
      "score": 13,
      "details": [
        "secure cookies"
      ],
      "fixes": []
    },
    "passwordHashing": {
      "passed": true,
      "score": 11,
      "details": [],
      "fixes": []
    },
    "rateLimiting": {
      "passed": true,
      "score": 15,
      "details": [],
      "fixes": []
    },
    "auditLogs": {
      "passed": false,
      "score": 0,
      "details": [
        {
          "file": "my-frontend/src/components/auth/LoginForm.tsx",
          "line": 32,
          "content": "await login(values.email, values.password)",
          "type": "source_logging"
        },
        {
          "file": "my-frontend/src/contexts/AuthContext.tsx",
          "line": 21,
          "content": "login: (email: string, password: string) => Promise<boolean>",
          "type": "source_logging"
        },
        {
          "file": "my-frontend/src/contexts/AuthContext.tsx",
          "line": 63,
          "content": "const login = async (email: string, password: string): Promise<boolean> => {",
          "type": "source_logging"
        },
        {
          "file": "my-frontend/src/providers/AuthProvider.tsx",
          "line": 10,
          "content": "login: (email: string, password: string) => Promise<void>",
          "type": "source_logging"
        },
        {
          "file": "my-frontend/src/providers/AuthProvider.tsx",
          "line": 34,
          "content": "async function login(email: string, password: string) {",
          "type": "source_logging"
        },
        {
          "file": "my-frontend/src/providers/AuthProvider.tsx",
          "line": 36,
          "content": "const response = await api.post('/api/login', { email, password })",
          "type": "source_logging"
        },
        {
          "file": "my-frontend/src/store/useAuth.ts",
          "line": 6,
          "content": "login: (email: string, password: string) => Promise<void>",
          "type": "source_logging"
        },
        {
          "file": "my-frontend/src/store/useAuth.ts",
          "line": 13,
          "content": "login: async (email, password) => {",
          "type": "source_logging"
        },
        {
          "file": "my-frontend/src/store/useAuth.ts",
          "line": 15,
          "content": "const res = await api.post('/api/login', { email, password })",
          "type": "source_logging"
        },
        {
          "file": "my-frontend/app/login/page.tsx",
          "line": 81,
          "content": "await login(email, password)",
          "type": "source_logging"
        },
        {
          "file": "apps/api/src/auth/auth.controller.ts",
          "line": 9,
          "content": "// Minimal dev login: set an HttpOnly cookie named 'token' with value 'devtoken'",
          "type": "source_logging"
        },
        {
          "file": "apps/api/src/auth/auth.service.ts",
          "line": 81,
          "content": "this.logger.debug('token verify failed', e && (e as any).message);",
          "type": "source_logging"
        }
      ],
      "fixes": []
    },
    "sessionSecurity": {
      "passed": true,
      "score": 20,
      "details": [],
      "fixes": []
    }
  },
  "timestamp": "2025-10-05T13:19:53.935Z",
  "auditVersion": "1.0.0",
  "application": "BISMAN ERP",
  "auditor": "GitHub Copilot Security Auditor"
}