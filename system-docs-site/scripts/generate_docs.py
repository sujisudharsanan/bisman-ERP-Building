"""
Generate living documentation artifacts:
- Fill AUTO_DATE_FIELD in markdown files
- Optionally extract code signatures (JS/TS) and DB schema
- Build mkdocs site (requires mkdocs and plugins installed)

Usage: python3 generate_docs.py --fill-dates --gen-code --gen-schema --build
"""
from __future__ import annotations
import argparse
from pathlib import Path
from datetime import datetime
import subprocess
import sys

# Paths
THIS = Path(__file__).resolve()
SCRIPTS_DIR = THIS.parent
DOCS = SCRIPTS_DIR.parent  # system-docs
REPO_ROOT = DOCS.parent
MKDOCS_CONFIG = REPO_ROOT / "mkdocs.yml"

DATE_STR = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")


def fill_dates():
    """Replace {{AUTO_DATE_FIELD}} in all markdown files under system-docs."""
    md_files = list(DOCS.rglob("*.md"))
    updated = 0
    for f in md_files:
        text = f.read_text(encoding="utf-8")
        if "{{AUTO_DATE_FIELD}}" in text:
            text = text.replace("{{AUTO_DATE_FIELD}}", DATE_STR)
            f.write_text(text, encoding="utf-8")
            updated += 1
            print(f"Updated date in {f.relative_to(REPO_ROOT)}")
    if updated == 0:
        print("No date placeholders found; nothing to update.")


def run_code_extractor():
    """Run the Node-based JS/TS extractor to produce code-summary.md in system-docs/autogenerated."""
    extractor = SCRIPTS_DIR / "extract_code_js.js"
    if not extractor.exists():
        print("Code extractor not found; skipping")
        return
    print("Running JS/TS code extractor...")
    try:
        subprocess.check_call(["node", str(extractor)])
    except subprocess.CalledProcessError as e:
        print("Code extractor failed:", e)
        raise


def run_schema_extractor():
    """Run the Python schema extractor which reads DOCS_DB_URL or falls back to migrations."""
    extractor = SCRIPTS_DIR / "extract_schema.py"
    if not extractor.exists():
        print("Schema extractor not found; skipping")
        return
    print("Running schema extractor...")
    try:
        subprocess.check_call([sys.executable, str(extractor)])
    except subprocess.CalledProcessError as e:
        print("Schema extractor failed:", e)
        raise


def build_mkdocs():
    """Build the MkDocs site using the repo-level mkdocs.yml; outputs to system-docs/site."""
    if not MKDOCS_CONFIG.exists():
        raise FileNotFoundError(f"mkdocs config not found at {MKDOCS_CONFIG}; ensure mkdocs.yml exists at repo root")
    # MkDocs site_dir is set in mkdocs.yml (we use system-docs-site to avoid nesting)
    out_dir = REPO_ROOT / "system-docs-site"
    print(f"Building MkDocs site (config: {MKDOCS_CONFIG}) -> {out_dir}")
    cmd = ["mkdocs", "build", "-f", str(MKDOCS_CONFIG), "-d", str(out_dir)]
    try:
        subprocess.check_call(cmd)
        print(f"MkDocs build complete. Site output at {out_dir}")
    except subprocess.CalledProcessError as e:
        print("MkDocs build failed:", e)
        raise


def main():
    parser = argparse.ArgumentParser(description="Generate living documentation artifacts")
    parser.add_argument("--fill-dates", action="store_true", help="Fill {{AUTO_DATE_FIELD}} in markdown files")
    parser.add_argument("--gen-code", action="store_true", help="Run JS/TS code extractor")
    parser.add_argument("--gen-schema", action="store_true", help="Run DB schema extractor")
    parser.add_argument("--build", action="store_true", help="Run mkdocs build to produce HTML site")
    args = parser.parse_args()

    if not any([args.fill_dates, args.gen_code, args.gen_schema, args.build]):
        parser.print_help()
        return

    if args.fill_dates:
        fill_dates()

    if args.gen_code:
        run_code_extractor()

    if args.gen_schema:
        run_schema_extractor()

    if args.build:
        build_mkdocs()


if __name__ == "__main__":
    main()
