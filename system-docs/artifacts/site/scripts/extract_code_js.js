/*
Simple JS/TS code extractor to find exported function signatures and JSDoc comments.
Writes results into system-docs/autogenerated/code-summary.md

This is a lightweight parser using regex for small projects. For large codebases,
plug in a proper TypeScript compiler API parser.
*/
const fs = require('fs');
const path = require('path');

const ROOT = path.resolve(__dirname, '..');
const OUT = path.join(ROOT, 'autogenerated');
if (!fs.existsSync(OUT)) fs.mkdirSync(OUT, { recursive: true });
const outFile = path.join(OUT, 'code-summary.md');

const SRC_DIRS = [
  path.resolve(process.cwd(), 'my-backend'),
  path.resolve(process.cwd(), 'my-frontend', 'src')
];

let out = '# Code Summary\n\n';

function scanDir(dir) {
  if (!fs.existsSync(dir)) return;
  const files = fs.readdirSync(dir);
  for (const f of files) {
    const full = path.join(dir, f);
    const stat = fs.statSync(full);
    if (stat.isDirectory()) {
      scanDir(full);
    } else if (/\.(js|jsx|ts|tsx)$/.test(f)) {
      const content = fs.readFileSync(full, 'utf8');
      const re = /\/\*\*([\s\S]*?)\*\/\s*(?:export\s+function|module\.exports\.|exports\.)\s*(\w+)\s*\(?([^)]*)\)?/g;
      let m;
      while ((m = re.exec(content))) {
        const jsdoc = m[1].trim().split('\n').map(s=>s.replace(/^\s*\*\s?/, '')).join('\n');
        const name = m[2];
        const args = m[3] || '';
        out += `## ${name}\n\n`;
        out += `Source: \`${path.relative(process.cwd(), full)}\`\n\n`;
        out += `Signature: \`${name}(${args})\`\n\n`;
        if (jsdoc) out += `JSDoc:\n\n${jsdoc}\n\n`;
      }
    }
  }
}

for (const d of SRC_DIRS) scanDir(d);
fs.writeFileSync(outFile, out, 'utf8');
console.log('Wrote', outFile);
